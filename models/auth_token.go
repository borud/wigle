// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthToken auth token
//
// swagger:model AuthToken
type AuthToken struct {

	// auth name
	AuthName string `json:"authName,omitempty"`

	// person Id
	PersonID int64 `json:"personId,omitempty"`

	// status
	// Enum: [STATUS_ACTIVE STATUS_DISABLED]
	Status string `json:"status,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// type
	// Enum: [API COMMAPI ANDROID COOKIE SERVICE]
	Type string `json:"type,omitempty"`
}

// Validate validates this auth token
func (m *AuthToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authTokenTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_ACTIVE","STATUS_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authTokenTypeStatusPropEnum = append(authTokenTypeStatusPropEnum, v)
	}
}

const (

	// AuthTokenStatusSTATUSACTIVE captures enum value "STATUS_ACTIVE"
	AuthTokenStatusSTATUSACTIVE string = "STATUS_ACTIVE"

	// AuthTokenStatusSTATUSDISABLED captures enum value "STATUS_DISABLED"
	AuthTokenStatusSTATUSDISABLED string = "STATUS_DISABLED"
)

// prop value enum
func (m *AuthToken) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, authTokenTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuthToken) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var authTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["API","COMMAPI","ANDROID","COOKIE","SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authTokenTypeTypePropEnum = append(authTokenTypeTypePropEnum, v)
	}
}

const (

	// AuthTokenTypeAPI captures enum value "API"
	AuthTokenTypeAPI string = "API"

	// AuthTokenTypeCOMMAPI captures enum value "COMMAPI"
	AuthTokenTypeCOMMAPI string = "COMMAPI"

	// AuthTokenTypeANDROID captures enum value "ANDROID"
	AuthTokenTypeANDROID string = "ANDROID"

	// AuthTokenTypeCOOKIE captures enum value "COOKIE"
	AuthTokenTypeCOOKIE string = "COOKIE"

	// AuthTokenTypeSERVICE captures enum value "SERVICE"
	AuthTokenTypeSERVICE string = "SERVICE"
)

// prop value enum
func (m *AuthToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, authTokenTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuthToken) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth token based on context it is used
func (m *AuthToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthToken) UnmarshalBinary(b []byte) error {
	var res AuthToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
