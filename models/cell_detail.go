// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CellDetail cell detail
//
// swagger:model CellDetail
type CellDetail struct {

	// attributes
	// Read Only: true
	Attributes []string `json:"attributes"`

	// best cluster wi g l e qo s
	// Read Only: true
	BestClusterWiGLEQoS int32 `json:"bestClusterWiGLEQoS,omitempty"`

	// channel
	// Read Only: true
	Channel int32 `json:"channel,omitempty"`

	// first seen
	// Read Only: true
	// Format: date-time
	FirstSeen strfmt.DateTime `json:"firstSeen,omitempty"`

	// last seen
	// Read Only: true
	// Format: date-time
	LastSeen strfmt.DateTime `json:"lastSeen,omitempty"`

	// last update
	// Read Only: true
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// location clusters
	LocationClusters []*CellLocationCluster `json:"locationClusters"`

	// network Id
	// Required: true
	// Read Only: true
	NetworkID string `json:"networkId"`

	// street address
	// Read Only: true
	StreetAddress *StreetAddress `json:"streetAddress,omitempty"`

	// trilaterated latitude
	// Read Only: true
	TrilateratedLatitude float64 `json:"trilateratedLatitude,omitempty"`

	// trilaterated longitude
	// Read Only: true
	TrilateratedLongitude float64 `json:"trilateratedLongitude,omitempty"`

	// type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// xarfcn
	// Read Only: true
	Xarfcn int32 `json:"xarfcn,omitempty"`
}

// Validate validates this cell detail
func (m *CellDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CellDetail) validateFirstSeen(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("firstSeen", "body", "date-time", m.FirstSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) validateLastSeen(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSeen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) validateLocationClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.LocationClusters); i++ {
		if swag.IsZero(m.LocationClusters[i]) { // not required
			continue
		}

		if m.LocationClusters[i] != nil {
			if err := m.LocationClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locationClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locationClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CellDetail) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.RequiredString("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) validateStreetAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.StreetAddress) { // not required
		return nil
	}

	if m.StreetAddress != nil {
		if err := m.StreetAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streetAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streetAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cell detail based on the context it is used
func (m *CellDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBestClusterWiGLEQoS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstSeen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSeen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreetAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrilateratedLatitude(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrilateratedLongitude(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXarfcn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CellDetail) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "attributes", "body", []string(m.Attributes)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateBestClusterWiGLEQoS(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bestClusterWiGLEQoS", "body", int32(m.BestClusterWiGLEQoS)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateChannel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "channel", "body", int32(m.Channel)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateFirstSeen(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "firstSeen", "body", strfmt.DateTime(m.FirstSeen)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateLastSeen(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastSeen", "body", strfmt.DateTime(m.LastSeen)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateLastUpdate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateLocationClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LocationClusters); i++ {

		if m.LocationClusters[i] != nil {
			if err := m.LocationClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locationClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locationClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CellDetail) contextValidateNetworkID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "networkId", "body", string(m.NetworkID)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateStreetAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.StreetAddress != nil {
		if err := m.StreetAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streetAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streetAddress")
			}
			return err
		}
	}

	return nil
}

func (m *CellDetail) contextValidateTrilateratedLatitude(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "trilateratedLatitude", "body", float64(m.TrilateratedLatitude)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateTrilateratedLongitude(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "trilateratedLongitude", "body", float64(m.TrilateratedLongitude)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *CellDetail) contextValidateXarfcn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "xarfcn", "body", int32(m.Xarfcn)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CellDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CellDetail) UnmarshalBinary(b []byte) error {
	var res CellDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
