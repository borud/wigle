// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WiFiLocationCluster wi fi location cluster
//
// swagger:model WiFiLocationCluster
type WiFiLocationCluster struct {

	// centroid latitude
	CentroidLatitude float64 `json:"centroidLatitude,omitempty"`

	// centroid longitude
	CentroidLongitude float64 `json:"centroidLongitude,omitempty"`

	// cluster ssid
	ClusterSsid string `json:"clusterSsid,omitempty"`

	// days observed count
	DaysObservedCount int32 `json:"daysObservedCount,omitempty"`

	// locations
	Locations []*WiFiLocation `json:"locations"`

	// max last update
	// Format: date-time
	MaxLastUpdate strfmt.DateTime `json:"maxLastUpdate,omitempty"`

	// min last update
	// Format: date-time
	MinLastUpdate strfmt.DateTime `json:"minLastUpdate,omitempty"`

	// score
	Score int32 `json:"score,omitempty"`
}

// Validate validates this wi fi location cluster
func (m *WiFiLocationCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WiFiLocationCluster) validateLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {
		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {
			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WiFiLocationCluster) validateMaxLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxLastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("maxLastUpdate", "body", "date-time", m.MaxLastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WiFiLocationCluster) validateMinLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.MinLastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("minLastUpdate", "body", "date-time", m.MinLastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wi fi location cluster based on the context it is used
func (m *WiFiLocationCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WiFiLocationCluster) contextValidateLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locations); i++ {

		if m.Locations[i] != nil {
			if err := m.Locations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WiFiLocationCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WiFiLocationCluster) UnmarshalBinary(b []byte) error {
	var res WiFiLocationCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
