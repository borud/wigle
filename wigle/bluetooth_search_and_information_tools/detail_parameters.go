// Code generated by go-swagger; DO NOT EDIT.

package bluetooth_search_and_information_tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDetailParams creates a new DetailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDetailParams() *DetailParams {
	return &DetailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDetailParamsWithTimeout creates a new DetailParams object
// with the ability to set a timeout on a request.
func NewDetailParamsWithTimeout(timeout time.Duration) *DetailParams {
	return &DetailParams{
		timeout: timeout,
	}
}

// NewDetailParamsWithContext creates a new DetailParams object
// with the ability to set a context for a request.
func NewDetailParamsWithContext(ctx context.Context) *DetailParams {
	return &DetailParams{
		Context: ctx,
	}
}

// NewDetailParamsWithHTTPClient creates a new DetailParams object
// with the ability to set a custom HTTPClient for a request.
func NewDetailParamsWithHTTPClient(client *http.Client) *DetailParams {
	return &DetailParams{
		HTTPClient: client,
	}
}

/*
DetailParams contains all the parameters to send to the API endpoint

	for the detail operation.

	Typically these are written to a http.Request.
*/
type DetailParams struct {

	/* Netid.

	   The full Bluetooth Device ID to search
	*/
	Netid *string

	/* ReverseAddress.

	   Reverse geocode for an approximate address
	*/
	ReverseAddress *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DetailParams) WithDefaults() *DetailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DetailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the detail params
func (o *DetailParams) WithTimeout(timeout time.Duration) *DetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the detail params
func (o *DetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the detail params
func (o *DetailParams) WithContext(ctx context.Context) *DetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the detail params
func (o *DetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the detail params
func (o *DetailParams) WithHTTPClient(client *http.Client) *DetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the detail params
func (o *DetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetid adds the netid to the detail params
func (o *DetailParams) WithNetid(netid *string) *DetailParams {
	o.SetNetid(netid)
	return o
}

// SetNetid adds the netid to the detail params
func (o *DetailParams) SetNetid(netid *string) {
	o.Netid = netid
}

// WithReverseAddress adds the reverseAddress to the detail params
func (o *DetailParams) WithReverseAddress(reverseAddress *string) *DetailParams {
	o.SetReverseAddress(reverseAddress)
	return o
}

// SetReverseAddress adds the reverseAddress to the detail params
func (o *DetailParams) SetReverseAddress(reverseAddress *string) {
	o.ReverseAddress = reverseAddress
}

// WriteToRequest writes these params to a swagger request
func (o *DetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Netid != nil {

		// query param netid
		var qrNetid string

		if o.Netid != nil {
			qrNetid = *o.Netid
		}
		qNetid := qrNetid
		if qNetid != "" {

			if err := r.SetQueryParam("netid", qNetid); err != nil {
				return err
			}
		}
	}

	if o.ReverseAddress != nil {

		// query param reverseAddress
		var qrReverseAddress string

		if o.ReverseAddress != nil {
			qrReverseAddress = *o.ReverseAddress
		}
		qReverseAddress := qrReverseAddress
		if qReverseAddress != "" {

			if err := r.SetQueryParam("reverseAddress", qReverseAddress); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
