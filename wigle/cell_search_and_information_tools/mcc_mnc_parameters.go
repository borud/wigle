// Code generated by go-swagger; DO NOT EDIT.

package cell_search_and_information_tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewMccMncParams creates a new MccMncParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMccMncParams() *MccMncParams {
	return &MccMncParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMccMncParamsWithTimeout creates a new MccMncParams object
// with the ability to set a timeout on a request.
func NewMccMncParamsWithTimeout(timeout time.Duration) *MccMncParams {
	return &MccMncParams{
		timeout: timeout,
	}
}

// NewMccMncParamsWithContext creates a new MccMncParams object
// with the ability to set a context for a request.
func NewMccMncParamsWithContext(ctx context.Context) *MccMncParams {
	return &MccMncParams{
		Context: ctx,
	}
}

// NewMccMncParamsWithHTTPClient creates a new MccMncParams object
// with the ability to set a custom HTTPClient for a request.
func NewMccMncParamsWithHTTPClient(client *http.Client) *MccMncParams {
	return &MccMncParams{
		HTTPClient: client,
	}
}

/*
MccMncParams contains all the parameters to send to the API endpoint

	for the mcc mnc operation.

	Typically these are written to a http.Request.
*/
type MccMncParams struct {

	/* Mcc.

	   MCC to filter
	*/
	Mcc *string

	/* Mnc.

	   MNC to filter
	*/
	Mnc *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the mcc mnc params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MccMncParams) WithDefaults() *MccMncParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the mcc mnc params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MccMncParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the mcc mnc params
func (o *MccMncParams) WithTimeout(timeout time.Duration) *MccMncParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mcc mnc params
func (o *MccMncParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mcc mnc params
func (o *MccMncParams) WithContext(ctx context.Context) *MccMncParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mcc mnc params
func (o *MccMncParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mcc mnc params
func (o *MccMncParams) WithHTTPClient(client *http.Client) *MccMncParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mcc mnc params
func (o *MccMncParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMcc adds the mcc to the mcc mnc params
func (o *MccMncParams) WithMcc(mcc *string) *MccMncParams {
	o.SetMcc(mcc)
	return o
}

// SetMcc adds the mcc to the mcc mnc params
func (o *MccMncParams) SetMcc(mcc *string) {
	o.Mcc = mcc
}

// WithMnc adds the mnc to the mcc mnc params
func (o *MccMncParams) WithMnc(mnc *string) *MccMncParams {
	o.SetMnc(mnc)
	return o
}

// SetMnc adds the mnc to the mcc mnc params
func (o *MccMncParams) SetMnc(mnc *string) {
	o.Mnc = mnc
}

// WriteToRequest writes these params to a swagger request
func (o *MccMncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Mcc != nil {

		// query param mcc
		var qrMcc string

		if o.Mcc != nil {
			qrMcc = *o.Mcc
		}
		qMcc := qrMcc
		if qMcc != "" {

			if err := r.SetQueryParam("mcc", qMcc); err != nil {
				return err
			}
		}
	}

	if o.Mnc != nil {

		// query param mnc
		var qrMnc string

		if o.Mnc != nil {
			qrMnc = *o.Mnc
		}
		qMnc := qrMnc
		if qMnc != "" {

			if err := r.SetQueryParam("mnc", qMnc); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
