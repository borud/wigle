// Code generated by go-swagger; DO NOT EDIT.

package cell_search_and_information_tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearch1Params creates a new Search1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearch1Params() *Search1Params {
	return &Search1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearch1ParamsWithTimeout creates a new Search1Params object
// with the ability to set a timeout on a request.
func NewSearch1ParamsWithTimeout(timeout time.Duration) *Search1Params {
	return &Search1Params{
		timeout: timeout,
	}
}

// NewSearch1ParamsWithContext creates a new Search1Params object
// with the ability to set a context for a request.
func NewSearch1ParamsWithContext(ctx context.Context) *Search1Params {
	return &Search1Params{
		Context: ctx,
	}
}

// NewSearch1ParamsWithHTTPClient creates a new Search1Params object
// with the ability to set a custom HTTPClient for a request.
func NewSearch1ParamsWithHTTPClient(client *http.Client) *Search1Params {
	return &Search1Params{
		HTTPClient: client,
	}
}

/*
Search1Params contains all the parameters to send to the API endpoint

	for the search 1 operation.

	Typically these are written to a http.Request.
*/
type Search1Params struct {

	/* CellID.

	   Cell ID(GSM/LTE/WCDMA/5G NR) or Basestation (CDMA) parameter by which to filter
	*/
	CellID *string

	/* CellNet.

	   Cell LAC (GSM/LTE/WCDMA/5G NR) or Network (CDMA) ID parameter by which to filter
	*/
	CellNet *string

	/* CellOp.

	   Cell Operator (GSM/LTE/WCDMA/5G NR) or System (CDMA) ID parameter by which to filter
	*/
	CellOp *string

	/* City.

	   Street address city
	*/
	City *string

	/* ClosestLat.

	   Latitude to order by closest network (requires closestLong)
	*/
	ClosestLat *float64

	/* ClosestLong.

	   Longitude to order by closest network (requires closestLat)
	*/
	ClosestLong *float64

	/* Country.

	   Street address country
	*/
	Country *string

	/* EndTransID.

	   Latest transid by which to bound (year-level precision only), format 'yyyyMMdd-00000'
	*/
	EndTransID *string

	/* Firsttime.

	   Filter points by when they were first created (more recent than this value), condensed date/time numeric string format 'yyyyMMdd[hhmm[ss]]'
	*/
	Firsttime *string

	/* HouseNumber.

	   Street address house number
	*/
	HouseNumber *string

	/* Lasttime.

	   Filter points by how recently they've had data submitted (more recent than this value), condensed date/time numeric string format 'yyyyMMdd[hhmm[ss]]'
	*/
	Lasttime *string

	/* Lastupdt.

	   Filter points by how recently they've been updated (more recent than this value), condensed date/time numeric string format 'yyyyMMdd[hhmm[ss]]'
	*/
	Lastupdt *string

	/* Latrange1.

	   Lesser of two latitudes by which to bound the search (specify both)
	*/
	Latrange1 *float64

	/* Latrange2.

	   Greater of two latitudes by which to bound the search (specify both)
	*/
	Latrange2 *float64

	/* Longrange1.

	   Lesser of two longitudes by which to bound the search (specify both)
	*/
	Longrange1 *float64

	/* Longrange2.

	   Greater of two longitudes by which to bound the search (specify both)
	*/
	Longrange2 *float64

	/* MinQoS.

	   Minimum Quality of Signal (0-7).

	   Format: int32
	*/
	MinQoS *int32

	/* Notmine.

	   Only search for networks first seen by other users
	*/
	Notmine *string

	/* Onlymine.

	   Search only for points first discovered by the current user. Use any string to set, leave unset for general search. Can't be used with COMMAPI auth, since these are points you have locally.

	   Default: "false"
	*/
	Onlymine *string

	/* PostalCode.

	   Street address postal code
	*/
	PostalCode *string

	/* Region.

	   Street address region
	*/
	Region *string

	/* ResultsPerPage.

	   How many results to return per request. Defaults to 25 for COMMAPI, 100 for site. Bounded at 1000 for COMMAPI, 100 for site.

	   Format: int64
	*/
	ResultsPerPage *int64

	/* Road.

	   Street address road
	*/
	Road *string

	/* SearchAfter.

	   Put in the previous page's searchAfter result to get the next page. Use this instead of 'first'
	*/
	SearchAfter *string

	/* ShowCdma.

	   Include CDMA cell networks

	   Default: "true"
	*/
	ShowCdma *string

	/* ShowGsm.

	   Include GSM cell networks

	   Default: "true"
	*/
	ShowGsm *string

	/* ShowLte.

	   Include LTE cell networks

	   Default: "true"
	*/
	ShowLte *string

	/* ShowNr.

	   Include 5G NR cell networks

	   Default: "true"
	*/
	ShowNr *string

	/* ShowWcdma.

	   Include WCDMA cell networks

	   Default: "true"
	*/
	ShowWcdma *string

	/* Ssid.

	   Include only cell towers exactly matching the string network name.
	*/
	Ssid *string

	/* Ssidlike.

	   Include only cell towers matching the string network name, allowing wildcards '%' (any string) and '_' (any character).
	*/
	Ssidlike *string

	/* StartTransID.

	   Earliest transid by which to bound (year-level precision only), format 'yyyyMMdd-00000'
	*/
	StartTransID *string

	/* Variance.

	   How tightly to bound queries against the provided latitude/longitude box. Value must be between 0.001 and 0.2. Intended for use with non-exact decimals and geocoded bounds.
	*/
	Variance *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Search1Params) WithDefaults() *Search1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Search1Params) SetDefaults() {
	var (
		onlymineDefault = string("false")

		showCdmaDefault = string("true")

		showGsmDefault = string("true")

		showLteDefault = string("true")

		showNrDefault = string("true")

		showWcdmaDefault = string("true")
	)

	val := Search1Params{
		Onlymine:  &onlymineDefault,
		ShowCdma:  &showCdmaDefault,
		ShowGsm:   &showGsmDefault,
		ShowLte:   &showLteDefault,
		ShowNr:    &showNrDefault,
		ShowWcdma: &showWcdmaDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search 1 params
func (o *Search1Params) WithTimeout(timeout time.Duration) *Search1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search 1 params
func (o *Search1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search 1 params
func (o *Search1Params) WithContext(ctx context.Context) *Search1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search 1 params
func (o *Search1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search 1 params
func (o *Search1Params) WithHTTPClient(client *http.Client) *Search1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search 1 params
func (o *Search1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCellID adds the cellID to the search 1 params
func (o *Search1Params) WithCellID(cellID *string) *Search1Params {
	o.SetCellID(cellID)
	return o
}

// SetCellID adds the cellId to the search 1 params
func (o *Search1Params) SetCellID(cellID *string) {
	o.CellID = cellID
}

// WithCellNet adds the cellNet to the search 1 params
func (o *Search1Params) WithCellNet(cellNet *string) *Search1Params {
	o.SetCellNet(cellNet)
	return o
}

// SetCellNet adds the cellNet to the search 1 params
func (o *Search1Params) SetCellNet(cellNet *string) {
	o.CellNet = cellNet
}

// WithCellOp adds the cellOp to the search 1 params
func (o *Search1Params) WithCellOp(cellOp *string) *Search1Params {
	o.SetCellOp(cellOp)
	return o
}

// SetCellOp adds the cellOp to the search 1 params
func (o *Search1Params) SetCellOp(cellOp *string) {
	o.CellOp = cellOp
}

// WithCity adds the city to the search 1 params
func (o *Search1Params) WithCity(city *string) *Search1Params {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the search 1 params
func (o *Search1Params) SetCity(city *string) {
	o.City = city
}

// WithClosestLat adds the closestLat to the search 1 params
func (o *Search1Params) WithClosestLat(closestLat *float64) *Search1Params {
	o.SetClosestLat(closestLat)
	return o
}

// SetClosestLat adds the closestLat to the search 1 params
func (o *Search1Params) SetClosestLat(closestLat *float64) {
	o.ClosestLat = closestLat
}

// WithClosestLong adds the closestLong to the search 1 params
func (o *Search1Params) WithClosestLong(closestLong *float64) *Search1Params {
	o.SetClosestLong(closestLong)
	return o
}

// SetClosestLong adds the closestLong to the search 1 params
func (o *Search1Params) SetClosestLong(closestLong *float64) {
	o.ClosestLong = closestLong
}

// WithCountry adds the country to the search 1 params
func (o *Search1Params) WithCountry(country *string) *Search1Params {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the search 1 params
func (o *Search1Params) SetCountry(country *string) {
	o.Country = country
}

// WithEndTransID adds the endTransID to the search 1 params
func (o *Search1Params) WithEndTransID(endTransID *string) *Search1Params {
	o.SetEndTransID(endTransID)
	return o
}

// SetEndTransID adds the endTransId to the search 1 params
func (o *Search1Params) SetEndTransID(endTransID *string) {
	o.EndTransID = endTransID
}

// WithFirsttime adds the firsttime to the search 1 params
func (o *Search1Params) WithFirsttime(firsttime *string) *Search1Params {
	o.SetFirsttime(firsttime)
	return o
}

// SetFirsttime adds the firsttime to the search 1 params
func (o *Search1Params) SetFirsttime(firsttime *string) {
	o.Firsttime = firsttime
}

// WithHouseNumber adds the houseNumber to the search 1 params
func (o *Search1Params) WithHouseNumber(houseNumber *string) *Search1Params {
	o.SetHouseNumber(houseNumber)
	return o
}

// SetHouseNumber adds the houseNumber to the search 1 params
func (o *Search1Params) SetHouseNumber(houseNumber *string) {
	o.HouseNumber = houseNumber
}

// WithLasttime adds the lasttime to the search 1 params
func (o *Search1Params) WithLasttime(lasttime *string) *Search1Params {
	o.SetLasttime(lasttime)
	return o
}

// SetLasttime adds the lasttime to the search 1 params
func (o *Search1Params) SetLasttime(lasttime *string) {
	o.Lasttime = lasttime
}

// WithLastupdt adds the lastupdt to the search 1 params
func (o *Search1Params) WithLastupdt(lastupdt *string) *Search1Params {
	o.SetLastupdt(lastupdt)
	return o
}

// SetLastupdt adds the lastupdt to the search 1 params
func (o *Search1Params) SetLastupdt(lastupdt *string) {
	o.Lastupdt = lastupdt
}

// WithLatrange1 adds the latrange1 to the search 1 params
func (o *Search1Params) WithLatrange1(latrange1 *float64) *Search1Params {
	o.SetLatrange1(latrange1)
	return o
}

// SetLatrange1 adds the latrange1 to the search 1 params
func (o *Search1Params) SetLatrange1(latrange1 *float64) {
	o.Latrange1 = latrange1
}

// WithLatrange2 adds the latrange2 to the search 1 params
func (o *Search1Params) WithLatrange2(latrange2 *float64) *Search1Params {
	o.SetLatrange2(latrange2)
	return o
}

// SetLatrange2 adds the latrange2 to the search 1 params
func (o *Search1Params) SetLatrange2(latrange2 *float64) {
	o.Latrange2 = latrange2
}

// WithLongrange1 adds the longrange1 to the search 1 params
func (o *Search1Params) WithLongrange1(longrange1 *float64) *Search1Params {
	o.SetLongrange1(longrange1)
	return o
}

// SetLongrange1 adds the longrange1 to the search 1 params
func (o *Search1Params) SetLongrange1(longrange1 *float64) {
	o.Longrange1 = longrange1
}

// WithLongrange2 adds the longrange2 to the search 1 params
func (o *Search1Params) WithLongrange2(longrange2 *float64) *Search1Params {
	o.SetLongrange2(longrange2)
	return o
}

// SetLongrange2 adds the longrange2 to the search 1 params
func (o *Search1Params) SetLongrange2(longrange2 *float64) {
	o.Longrange2 = longrange2
}

// WithMinQoS adds the minQoS to the search 1 params
func (o *Search1Params) WithMinQoS(minQoS *int32) *Search1Params {
	o.SetMinQoS(minQoS)
	return o
}

// SetMinQoS adds the minQoS to the search 1 params
func (o *Search1Params) SetMinQoS(minQoS *int32) {
	o.MinQoS = minQoS
}

// WithNotmine adds the notmine to the search 1 params
func (o *Search1Params) WithNotmine(notmine *string) *Search1Params {
	o.SetNotmine(notmine)
	return o
}

// SetNotmine adds the notmine to the search 1 params
func (o *Search1Params) SetNotmine(notmine *string) {
	o.Notmine = notmine
}

// WithOnlymine adds the onlymine to the search 1 params
func (o *Search1Params) WithOnlymine(onlymine *string) *Search1Params {
	o.SetOnlymine(onlymine)
	return o
}

// SetOnlymine adds the onlymine to the search 1 params
func (o *Search1Params) SetOnlymine(onlymine *string) {
	o.Onlymine = onlymine
}

// WithPostalCode adds the postalCode to the search 1 params
func (o *Search1Params) WithPostalCode(postalCode *string) *Search1Params {
	o.SetPostalCode(postalCode)
	return o
}

// SetPostalCode adds the postalCode to the search 1 params
func (o *Search1Params) SetPostalCode(postalCode *string) {
	o.PostalCode = postalCode
}

// WithRegion adds the region to the search 1 params
func (o *Search1Params) WithRegion(region *string) *Search1Params {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the search 1 params
func (o *Search1Params) SetRegion(region *string) {
	o.Region = region
}

// WithResultsPerPage adds the resultsPerPage to the search 1 params
func (o *Search1Params) WithResultsPerPage(resultsPerPage *int64) *Search1Params {
	o.SetResultsPerPage(resultsPerPage)
	return o
}

// SetResultsPerPage adds the resultsPerPage to the search 1 params
func (o *Search1Params) SetResultsPerPage(resultsPerPage *int64) {
	o.ResultsPerPage = resultsPerPage
}

// WithRoad adds the road to the search 1 params
func (o *Search1Params) WithRoad(road *string) *Search1Params {
	o.SetRoad(road)
	return o
}

// SetRoad adds the road to the search 1 params
func (o *Search1Params) SetRoad(road *string) {
	o.Road = road
}

// WithSearchAfter adds the searchAfter to the search 1 params
func (o *Search1Params) WithSearchAfter(searchAfter *string) *Search1Params {
	o.SetSearchAfter(searchAfter)
	return o
}

// SetSearchAfter adds the searchAfter to the search 1 params
func (o *Search1Params) SetSearchAfter(searchAfter *string) {
	o.SearchAfter = searchAfter
}

// WithShowCdma adds the showCdma to the search 1 params
func (o *Search1Params) WithShowCdma(showCdma *string) *Search1Params {
	o.SetShowCdma(showCdma)
	return o
}

// SetShowCdma adds the showCdma to the search 1 params
func (o *Search1Params) SetShowCdma(showCdma *string) {
	o.ShowCdma = showCdma
}

// WithShowGsm adds the showGsm to the search 1 params
func (o *Search1Params) WithShowGsm(showGsm *string) *Search1Params {
	o.SetShowGsm(showGsm)
	return o
}

// SetShowGsm adds the showGsm to the search 1 params
func (o *Search1Params) SetShowGsm(showGsm *string) {
	o.ShowGsm = showGsm
}

// WithShowLte adds the showLte to the search 1 params
func (o *Search1Params) WithShowLte(showLte *string) *Search1Params {
	o.SetShowLte(showLte)
	return o
}

// SetShowLte adds the showLte to the search 1 params
func (o *Search1Params) SetShowLte(showLte *string) {
	o.ShowLte = showLte
}

// WithShowNr adds the showNr to the search 1 params
func (o *Search1Params) WithShowNr(showNr *string) *Search1Params {
	o.SetShowNr(showNr)
	return o
}

// SetShowNr adds the showNr to the search 1 params
func (o *Search1Params) SetShowNr(showNr *string) {
	o.ShowNr = showNr
}

// WithShowWcdma adds the showWcdma to the search 1 params
func (o *Search1Params) WithShowWcdma(showWcdma *string) *Search1Params {
	o.SetShowWcdma(showWcdma)
	return o
}

// SetShowWcdma adds the showWcdma to the search 1 params
func (o *Search1Params) SetShowWcdma(showWcdma *string) {
	o.ShowWcdma = showWcdma
}

// WithSsid adds the ssid to the search 1 params
func (o *Search1Params) WithSsid(ssid *string) *Search1Params {
	o.SetSsid(ssid)
	return o
}

// SetSsid adds the ssid to the search 1 params
func (o *Search1Params) SetSsid(ssid *string) {
	o.Ssid = ssid
}

// WithSsidlike adds the ssidlike to the search 1 params
func (o *Search1Params) WithSsidlike(ssidlike *string) *Search1Params {
	o.SetSsidlike(ssidlike)
	return o
}

// SetSsidlike adds the ssidlike to the search 1 params
func (o *Search1Params) SetSsidlike(ssidlike *string) {
	o.Ssidlike = ssidlike
}

// WithStartTransID adds the startTransID to the search 1 params
func (o *Search1Params) WithStartTransID(startTransID *string) *Search1Params {
	o.SetStartTransID(startTransID)
	return o
}

// SetStartTransID adds the startTransId to the search 1 params
func (o *Search1Params) SetStartTransID(startTransID *string) {
	o.StartTransID = startTransID
}

// WithVariance adds the variance to the search 1 params
func (o *Search1Params) WithVariance(variance *float64) *Search1Params {
	o.SetVariance(variance)
	return o
}

// SetVariance adds the variance to the search 1 params
func (o *Search1Params) SetVariance(variance *float64) {
	o.Variance = variance
}

// WriteToRequest writes these params to a swagger request
func (o *Search1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CellID != nil {

		// query param cell_id
		var qrCellID string

		if o.CellID != nil {
			qrCellID = *o.CellID
		}
		qCellID := qrCellID
		if qCellID != "" {

			if err := r.SetQueryParam("cell_id", qCellID); err != nil {
				return err
			}
		}
	}

	if o.CellNet != nil {

		// query param cell_net
		var qrCellNet string

		if o.CellNet != nil {
			qrCellNet = *o.CellNet
		}
		qCellNet := qrCellNet
		if qCellNet != "" {

			if err := r.SetQueryParam("cell_net", qCellNet); err != nil {
				return err
			}
		}
	}

	if o.CellOp != nil {

		// query param cell_op
		var qrCellOp string

		if o.CellOp != nil {
			qrCellOp = *o.CellOp
		}
		qCellOp := qrCellOp
		if qCellOp != "" {

			if err := r.SetQueryParam("cell_op", qCellOp); err != nil {
				return err
			}
		}
	}

	if o.City != nil {

		// query param city
		var qrCity string

		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {

			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}
	}

	if o.ClosestLat != nil {

		// query param closestLat
		var qrClosestLat float64

		if o.ClosestLat != nil {
			qrClosestLat = *o.ClosestLat
		}
		qClosestLat := swag.FormatFloat64(qrClosestLat)
		if qClosestLat != "" {

			if err := r.SetQueryParam("closestLat", qClosestLat); err != nil {
				return err
			}
		}
	}

	if o.ClosestLong != nil {

		// query param closestLong
		var qrClosestLong float64

		if o.ClosestLong != nil {
			qrClosestLong = *o.ClosestLong
		}
		qClosestLong := swag.FormatFloat64(qrClosestLong)
		if qClosestLong != "" {

			if err := r.SetQueryParam("closestLong", qClosestLong); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.EndTransID != nil {

		// query param endTransID
		var qrEndTransID string

		if o.EndTransID != nil {
			qrEndTransID = *o.EndTransID
		}
		qEndTransID := qrEndTransID
		if qEndTransID != "" {

			if err := r.SetQueryParam("endTransID", qEndTransID); err != nil {
				return err
			}
		}
	}

	if o.Firsttime != nil {

		// query param firsttime
		var qrFirsttime string

		if o.Firsttime != nil {
			qrFirsttime = *o.Firsttime
		}
		qFirsttime := qrFirsttime
		if qFirsttime != "" {

			if err := r.SetQueryParam("firsttime", qFirsttime); err != nil {
				return err
			}
		}
	}

	if o.HouseNumber != nil {

		// query param houseNumber
		var qrHouseNumber string

		if o.HouseNumber != nil {
			qrHouseNumber = *o.HouseNumber
		}
		qHouseNumber := qrHouseNumber
		if qHouseNumber != "" {

			if err := r.SetQueryParam("houseNumber", qHouseNumber); err != nil {
				return err
			}
		}
	}

	if o.Lasttime != nil {

		// query param lasttime
		var qrLasttime string

		if o.Lasttime != nil {
			qrLasttime = *o.Lasttime
		}
		qLasttime := qrLasttime
		if qLasttime != "" {

			if err := r.SetQueryParam("lasttime", qLasttime); err != nil {
				return err
			}
		}
	}

	if o.Lastupdt != nil {

		// query param lastupdt
		var qrLastupdt string

		if o.Lastupdt != nil {
			qrLastupdt = *o.Lastupdt
		}
		qLastupdt := qrLastupdt
		if qLastupdt != "" {

			if err := r.SetQueryParam("lastupdt", qLastupdt); err != nil {
				return err
			}
		}
	}

	if o.Latrange1 != nil {

		// query param latrange1
		var qrLatrange1 float64

		if o.Latrange1 != nil {
			qrLatrange1 = *o.Latrange1
		}
		qLatrange1 := swag.FormatFloat64(qrLatrange1)
		if qLatrange1 != "" {

			if err := r.SetQueryParam("latrange1", qLatrange1); err != nil {
				return err
			}
		}
	}

	if o.Latrange2 != nil {

		// query param latrange2
		var qrLatrange2 float64

		if o.Latrange2 != nil {
			qrLatrange2 = *o.Latrange2
		}
		qLatrange2 := swag.FormatFloat64(qrLatrange2)
		if qLatrange2 != "" {

			if err := r.SetQueryParam("latrange2", qLatrange2); err != nil {
				return err
			}
		}
	}

	if o.Longrange1 != nil {

		// query param longrange1
		var qrLongrange1 float64

		if o.Longrange1 != nil {
			qrLongrange1 = *o.Longrange1
		}
		qLongrange1 := swag.FormatFloat64(qrLongrange1)
		if qLongrange1 != "" {

			if err := r.SetQueryParam("longrange1", qLongrange1); err != nil {
				return err
			}
		}
	}

	if o.Longrange2 != nil {

		// query param longrange2
		var qrLongrange2 float64

		if o.Longrange2 != nil {
			qrLongrange2 = *o.Longrange2
		}
		qLongrange2 := swag.FormatFloat64(qrLongrange2)
		if qLongrange2 != "" {

			if err := r.SetQueryParam("longrange2", qLongrange2); err != nil {
				return err
			}
		}
	}

	if o.MinQoS != nil {

		// query param minQoS
		var qrMinQoS int32

		if o.MinQoS != nil {
			qrMinQoS = *o.MinQoS
		}
		qMinQoS := swag.FormatInt32(qrMinQoS)
		if qMinQoS != "" {

			if err := r.SetQueryParam("minQoS", qMinQoS); err != nil {
				return err
			}
		}
	}

	if o.Notmine != nil {

		// query param notmine
		var qrNotmine string

		if o.Notmine != nil {
			qrNotmine = *o.Notmine
		}
		qNotmine := qrNotmine
		if qNotmine != "" {

			if err := r.SetQueryParam("notmine", qNotmine); err != nil {
				return err
			}
		}
	}

	if o.Onlymine != nil {

		// query param onlymine
		var qrOnlymine string

		if o.Onlymine != nil {
			qrOnlymine = *o.Onlymine
		}
		qOnlymine := qrOnlymine
		if qOnlymine != "" {

			if err := r.SetQueryParam("onlymine", qOnlymine); err != nil {
				return err
			}
		}
	}

	if o.PostalCode != nil {

		// query param postalCode
		var qrPostalCode string

		if o.PostalCode != nil {
			qrPostalCode = *o.PostalCode
		}
		qPostalCode := qrPostalCode
		if qPostalCode != "" {

			if err := r.SetQueryParam("postalCode", qPostalCode); err != nil {
				return err
			}
		}
	}

	if o.Region != nil {

		// query param region
		var qrRegion string

		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {

			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}
	}

	if o.ResultsPerPage != nil {

		// query param resultsPerPage
		var qrResultsPerPage int64

		if o.ResultsPerPage != nil {
			qrResultsPerPage = *o.ResultsPerPage
		}
		qResultsPerPage := swag.FormatInt64(qrResultsPerPage)
		if qResultsPerPage != "" {

			if err := r.SetQueryParam("resultsPerPage", qResultsPerPage); err != nil {
				return err
			}
		}
	}

	if o.Road != nil {

		// query param road
		var qrRoad string

		if o.Road != nil {
			qrRoad = *o.Road
		}
		qRoad := qrRoad
		if qRoad != "" {

			if err := r.SetQueryParam("road", qRoad); err != nil {
				return err
			}
		}
	}

	if o.SearchAfter != nil {

		// query param searchAfter
		var qrSearchAfter string

		if o.SearchAfter != nil {
			qrSearchAfter = *o.SearchAfter
		}
		qSearchAfter := qrSearchAfter
		if qSearchAfter != "" {

			if err := r.SetQueryParam("searchAfter", qSearchAfter); err != nil {
				return err
			}
		}
	}

	if o.ShowCdma != nil {

		// query param showCdma
		var qrShowCdma string

		if o.ShowCdma != nil {
			qrShowCdma = *o.ShowCdma
		}
		qShowCdma := qrShowCdma
		if qShowCdma != "" {

			if err := r.SetQueryParam("showCdma", qShowCdma); err != nil {
				return err
			}
		}
	}

	if o.ShowGsm != nil {

		// query param showGsm
		var qrShowGsm string

		if o.ShowGsm != nil {
			qrShowGsm = *o.ShowGsm
		}
		qShowGsm := qrShowGsm
		if qShowGsm != "" {

			if err := r.SetQueryParam("showGsm", qShowGsm); err != nil {
				return err
			}
		}
	}

	if o.ShowLte != nil {

		// query param showLte
		var qrShowLte string

		if o.ShowLte != nil {
			qrShowLte = *o.ShowLte
		}
		qShowLte := qrShowLte
		if qShowLte != "" {

			if err := r.SetQueryParam("showLte", qShowLte); err != nil {
				return err
			}
		}
	}

	if o.ShowNr != nil {

		// query param showNr
		var qrShowNr string

		if o.ShowNr != nil {
			qrShowNr = *o.ShowNr
		}
		qShowNr := qrShowNr
		if qShowNr != "" {

			if err := r.SetQueryParam("showNr", qShowNr); err != nil {
				return err
			}
		}
	}

	if o.ShowWcdma != nil {

		// query param showWcdma
		var qrShowWcdma string

		if o.ShowWcdma != nil {
			qrShowWcdma = *o.ShowWcdma
		}
		qShowWcdma := qrShowWcdma
		if qShowWcdma != "" {

			if err := r.SetQueryParam("showWcdma", qShowWcdma); err != nil {
				return err
			}
		}
	}

	if o.Ssid != nil {

		// query param ssid
		var qrSsid string

		if o.Ssid != nil {
			qrSsid = *o.Ssid
		}
		qSsid := qrSsid
		if qSsid != "" {

			if err := r.SetQueryParam("ssid", qSsid); err != nil {
				return err
			}
		}
	}

	if o.Ssidlike != nil {

		// query param ssidlike
		var qrSsidlike string

		if o.Ssidlike != nil {
			qrSsidlike = *o.Ssidlike
		}
		qSsidlike := qrSsidlike
		if qSsidlike != "" {

			if err := r.SetQueryParam("ssidlike", qSsidlike); err != nil {
				return err
			}
		}
	}

	if o.StartTransID != nil {

		// query param startTransID
		var qrStartTransID string

		if o.StartTransID != nil {
			qrStartTransID = *o.StartTransID
		}
		qStartTransID := qrStartTransID
		if qStartTransID != "" {

			if err := r.SetQueryParam("startTransID", qStartTransID); err != nil {
				return err
			}
		}
	}

	if o.Variance != nil {

		// query param variance
		var qrVariance float64

		if o.Variance != nil {
			qrVariance = *o.Variance
		}
		qVariance := swag.FormatFloat64(qrVariance)
		if qVariance != "" {

			if err := r.SetQueryParam("variance", qVariance); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
