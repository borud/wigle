// Code generated by go-swagger; DO NOT EDIT.

package network_observation_file_upload_and_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTransLogsForUserParams creates a new GetTransLogsForUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTransLogsForUserParams() *GetTransLogsForUserParams {
	return &GetTransLogsForUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransLogsForUserParamsWithTimeout creates a new GetTransLogsForUserParams object
// with the ability to set a timeout on a request.
func NewGetTransLogsForUserParamsWithTimeout(timeout time.Duration) *GetTransLogsForUserParams {
	return &GetTransLogsForUserParams{
		timeout: timeout,
	}
}

// NewGetTransLogsForUserParamsWithContext creates a new GetTransLogsForUserParams object
// with the ability to set a context for a request.
func NewGetTransLogsForUserParamsWithContext(ctx context.Context) *GetTransLogsForUserParams {
	return &GetTransLogsForUserParams{
		Context: ctx,
	}
}

// NewGetTransLogsForUserParamsWithHTTPClient creates a new GetTransLogsForUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTransLogsForUserParamsWithHTTPClient(client *http.Client) *GetTransLogsForUserParams {
	return &GetTransLogsForUserParams{
		HTTPClient: client,
	}
}

/*
GetTransLogsForUserParams contains all the parameters to send to the API endpoint

	for the get trans logs for user operation.

	Typically these are written to a http.Request.
*/
type GetTransLogsForUserParams struct {

	/* Pageend.

	   Number of results to fetch from offset. Defaults to 100

	   Format: int64
	*/
	Pageend *int64

	/* Pagestart.

	   Most recent record to fetch descending chronologically. Defaults to 0

	   Format: int64
	*/
	Pagestart *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get trans logs for user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransLogsForUserParams) WithDefaults() *GetTransLogsForUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get trans logs for user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransLogsForUserParams) SetDefaults() {
	var (
		pagestartDefault = int64(0)
	)

	val := GetTransLogsForUserParams{
		Pagestart: &pagestartDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get trans logs for user params
func (o *GetTransLogsForUserParams) WithTimeout(timeout time.Duration) *GetTransLogsForUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get trans logs for user params
func (o *GetTransLogsForUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get trans logs for user params
func (o *GetTransLogsForUserParams) WithContext(ctx context.Context) *GetTransLogsForUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get trans logs for user params
func (o *GetTransLogsForUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get trans logs for user params
func (o *GetTransLogsForUserParams) WithHTTPClient(client *http.Client) *GetTransLogsForUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get trans logs for user params
func (o *GetTransLogsForUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageend adds the pageend to the get trans logs for user params
func (o *GetTransLogsForUserParams) WithPageend(pageend *int64) *GetTransLogsForUserParams {
	o.SetPageend(pageend)
	return o
}

// SetPageend adds the pageend to the get trans logs for user params
func (o *GetTransLogsForUserParams) SetPageend(pageend *int64) {
	o.Pageend = pageend
}

// WithPagestart adds the pagestart to the get trans logs for user params
func (o *GetTransLogsForUserParams) WithPagestart(pagestart *int64) *GetTransLogsForUserParams {
	o.SetPagestart(pagestart)
	return o
}

// SetPagestart adds the pagestart to the get trans logs for user params
func (o *GetTransLogsForUserParams) SetPagestart(pagestart *int64) {
	o.Pagestart = pagestart
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransLogsForUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Pageend != nil {

		// query param pageend
		var qrPageend int64

		if o.Pageend != nil {
			qrPageend = *o.Pageend
		}
		qPageend := swag.FormatInt64(qrPageend)
		if qPageend != "" {

			if err := r.SetQueryParam("pageend", qPageend); err != nil {
				return err
			}
		}
	}

	if o.Pagestart != nil {

		// query param pagestart
		var qrPagestart int64

		if o.Pagestart != nil {
			qrPagestart = *o.Pagestart
		}
		qPagestart := swag.FormatInt64(qrPagestart)
		if qPagestart != "" {

			if err := r.SetQueryParam("pagestart", qPagestart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
