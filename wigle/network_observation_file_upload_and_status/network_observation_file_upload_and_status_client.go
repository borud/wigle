// Code generated by go-swagger; DO NOT EDIT.

package network_observation_file_upload_and_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new network observation file upload and status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network observation file upload and status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetKmlForTransID(params *GetKmlForTransIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKmlForTransIDOK, error)

	GetTransLogsForUser(params *GetTransLogsForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTransLogsForUserOK, error)

	Upload(params *UploadParams, opts ...ClientOption) (*UploadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetKmlForTransID downloads a k m l summary of a file

Get a KML summary approximation for a successfully processed file uploaded by the current user
*/
func (a *Client) GetKmlForTransID(params *GetKmlForTransIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKmlForTransIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKmlForTransIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKmlForTransId",
		Method:             "GET",
		PathPattern:        "/api/v2/file/kml/{transid}",
		ProducesMediaTypes: []string{"application/vnd.google-earth.kml+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKmlForTransIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKmlForTransIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKmlForTransId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTransLogsForUser gets the status of files uploaded by the current user

Results in response model paginated at 100 results per page
*/
func (a *Client) GetTransLogsForUser(params *GetTransLogsForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTransLogsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransLogsForUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTransLogsForUser",
		Method:             "GET",
		PathPattern:        "/api/v2/file/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransLogsForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransLogsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransLogsForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Upload uploads a file

Transmit a file for processing and incorporation into the database. Supports DStumbler, G-Mon, inSSIDer, Kismac, Kismet, MacStumbler, NetStumbler, Pocket Warrior, Wardrive-Android, WiFiFoFum, WiFi-Where, WiGLE WiFi Wardriving, and Apple consolidated DB formats. One or more files may be enclosed within a zip, tar, or tar.gz archive. Files may not exceed 180MiB, and archives WILL IGNORE more than 200 member files. For documentation on WiGLE Wireless CSV files, see https://api.wigle.net/csvFormat.html
*/
func (a *Client) Upload(params *UploadParams, opts ...ClientOption) (*UploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload",
		Method:             "POST",
		PathPattern:        "/api/v2/file/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
