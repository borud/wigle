// Code generated by go-swagger; DO NOT EDIT.

package network_search_and_information_tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCommentParams creates a new CommentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCommentParams() *CommentParams {
	return &CommentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCommentParamsWithTimeout creates a new CommentParams object
// with the ability to set a timeout on a request.
func NewCommentParamsWithTimeout(timeout time.Duration) *CommentParams {
	return &CommentParams{
		timeout: timeout,
	}
}

// NewCommentParamsWithContext creates a new CommentParams object
// with the ability to set a context for a request.
func NewCommentParamsWithContext(ctx context.Context) *CommentParams {
	return &CommentParams{
		Context: ctx,
	}
}

// NewCommentParamsWithHTTPClient creates a new CommentParams object
// with the ability to set a custom HTTPClient for a request.
func NewCommentParamsWithHTTPClient(client *http.Client) *CommentParams {
	return &CommentParams{
		HTTPClient: client,
	}
}

/*
CommentParams contains all the parameters to send to the API endpoint

	for the comment operation.

	Typically these are written to a http.Request.
*/
type CommentParams struct {

	/* Comment.

	   The comment to attach
	*/
	Comment *string

	/* Netid.

	   The BSSID of the network for the comment, e.g. '0A:2C:EF:3D:25:1B'
	*/
	Netid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommentParams) WithDefaults() *CommentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CommentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the comment params
func (o *CommentParams) WithTimeout(timeout time.Duration) *CommentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the comment params
func (o *CommentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the comment params
func (o *CommentParams) WithContext(ctx context.Context) *CommentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the comment params
func (o *CommentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the comment params
func (o *CommentParams) WithHTTPClient(client *http.Client) *CommentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the comment params
func (o *CommentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the comment params
func (o *CommentParams) WithComment(comment *string) *CommentParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the comment params
func (o *CommentParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithNetid adds the netid to the comment params
func (o *CommentParams) WithNetid(netid *string) *CommentParams {
	o.SetNetid(netid)
	return o
}

// SetNetid adds the netid to the comment params
func (o *CommentParams) SetNetid(netid *string) {
	o.Netid = netid
}

// WriteToRequest writes these params to a swagger request
func (o *CommentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Comment != nil {

		// form param comment
		var frComment string
		if o.Comment != nil {
			frComment = *o.Comment
		}
		fComment := frComment
		if fComment != "" {
			if err := r.SetFormParam("comment", fComment); err != nil {
				return err
			}
		}
	}

	if o.Netid != nil {

		// form param netid
		var frNetid string
		if o.Netid != nil {
			frNetid = *o.Netid
		}
		fNetid := frNetid
		if fNetid != "" {
			if err := r.SetFormParam("netid", fNetid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
