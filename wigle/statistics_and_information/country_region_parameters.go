// Code generated by go-swagger; DO NOT EDIT.

package statistics_and_information

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCountryRegionParams creates a new CountryRegionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCountryRegionParams() *CountryRegionParams {
	return &CountryRegionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCountryRegionParamsWithTimeout creates a new CountryRegionParams object
// with the ability to set a timeout on a request.
func NewCountryRegionParamsWithTimeout(timeout time.Duration) *CountryRegionParams {
	return &CountryRegionParams{
		timeout: timeout,
	}
}

// NewCountryRegionParamsWithContext creates a new CountryRegionParams object
// with the ability to set a context for a request.
func NewCountryRegionParamsWithContext(ctx context.Context) *CountryRegionParams {
	return &CountryRegionParams{
		Context: ctx,
	}
}

// NewCountryRegionParamsWithHTTPClient creates a new CountryRegionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCountryRegionParamsWithHTTPClient(client *http.Client) *CountryRegionParams {
	return &CountryRegionParams{
		HTTPClient: client,
	}
}

/*
CountryRegionParams contains all the parameters to send to the API endpoint

	for the country region operation.

	Typically these are written to a http.Request.
*/
type CountryRegionParams struct {

	/* Country.

	   the two-letter code of the country for which you'd like a regional breakdown. Defaults to 'US'

	   Default: "US"
	*/
	Country *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the country region params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CountryRegionParams) WithDefaults() *CountryRegionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the country region params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CountryRegionParams) SetDefaults() {
	var (
		countryDefault = string("US")
	)

	val := CountryRegionParams{
		Country: &countryDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the country region params
func (o *CountryRegionParams) WithTimeout(timeout time.Duration) *CountryRegionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the country region params
func (o *CountryRegionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the country region params
func (o *CountryRegionParams) WithContext(ctx context.Context) *CountryRegionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the country region params
func (o *CountryRegionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the country region params
func (o *CountryRegionParams) WithHTTPClient(client *http.Client) *CountryRegionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the country region params
func (o *CountryRegionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the country region params
func (o *CountryRegionParams) WithCountry(country *string) *CountryRegionParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the country region params
func (o *CountryRegionParams) SetCountry(country *string) {
	o.Country = country
}

// WriteToRequest writes these params to a swagger request
func (o *CountryRegionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
