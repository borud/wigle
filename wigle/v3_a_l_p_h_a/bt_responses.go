// Code generated by go-swagger; DO NOT EDIT.

package v3_a_l_p_h_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/borud/wigle/models"
)

// BtReader is a Reader for the Bt structure.
type BtReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BtReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBtOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewBtUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBtForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBtNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBtTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBtInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBtOK creates a BtOK with default headers values
func NewBtOK() *BtOK {
	return &BtOK{}
}

/*
BtOK describes a response with status code 200, with default header values.

Request succeeded
*/
type BtOK struct {
	Payload *models.BtDetail
}

// IsSuccess returns true when this bt o k response has a 2xx status code
func (o *BtOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bt o k response has a 3xx status code
func (o *BtOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt o k response has a 4xx status code
func (o *BtOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this bt o k response has a 5xx status code
func (o *BtOK) IsServerError() bool {
	return false
}

// IsCode returns true when this bt o k response a status code equal to that given
func (o *BtOK) IsCode(code int) bool {
	return code == 200
}

func (o *BtOK) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btOK  %+v", 200, o.Payload)
}

func (o *BtOK) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btOK  %+v", 200, o.Payload)
}

func (o *BtOK) GetPayload() *models.BtDetail {
	return o.Payload
}

func (o *BtOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BtDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBtUnauthorized creates a BtUnauthorized with default headers values
func NewBtUnauthorized() *BtUnauthorized {
	return &BtUnauthorized{}
}

/*
BtUnauthorized describes a response with status code 401, with default header values.

Not Authorized
*/
type BtUnauthorized struct {
}

// IsSuccess returns true when this bt unauthorized response has a 2xx status code
func (o *BtUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bt unauthorized response has a 3xx status code
func (o *BtUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt unauthorized response has a 4xx status code
func (o *BtUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this bt unauthorized response has a 5xx status code
func (o *BtUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this bt unauthorized response a status code equal to that given
func (o *BtUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *BtUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btUnauthorized ", 401)
}

func (o *BtUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btUnauthorized ", 401)
}

func (o *BtUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBtForbidden creates a BtForbidden with default headers values
func NewBtForbidden() *BtForbidden {
	return &BtForbidden{}
}

/*
BtForbidden describes a response with status code 403, with default header values.

Commercial request made for non-commercial resource
*/
type BtForbidden struct {
}

// IsSuccess returns true when this bt forbidden response has a 2xx status code
func (o *BtForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bt forbidden response has a 3xx status code
func (o *BtForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt forbidden response has a 4xx status code
func (o *BtForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this bt forbidden response has a 5xx status code
func (o *BtForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this bt forbidden response a status code equal to that given
func (o *BtForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *BtForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btForbidden ", 403)
}

func (o *BtForbidden) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btForbidden ", 403)
}

func (o *BtForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBtNotFound creates a BtNotFound with default headers values
func NewBtNotFound() *BtNotFound {
	return &BtNotFound{}
}

/*
BtNotFound describes a response with status code 404, with default header values.

No matching network ID found.
*/
type BtNotFound struct {
}

// IsSuccess returns true when this bt not found response has a 2xx status code
func (o *BtNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bt not found response has a 3xx status code
func (o *BtNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt not found response has a 4xx status code
func (o *BtNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this bt not found response has a 5xx status code
func (o *BtNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this bt not found response a status code equal to that given
func (o *BtNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *BtNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btNotFound ", 404)
}

func (o *BtNotFound) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btNotFound ", 404)
}

func (o *BtNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBtTooManyRequests creates a BtTooManyRequests with default headers values
func NewBtTooManyRequests() *BtTooManyRequests {
	return &BtTooManyRequests{}
}

/*
BtTooManyRequests describes a response with status code 429, with default header values.

too many DETAIL queries today.
*/
type BtTooManyRequests struct {
}

// IsSuccess returns true when this bt too many requests response has a 2xx status code
func (o *BtTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bt too many requests response has a 3xx status code
func (o *BtTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt too many requests response has a 4xx status code
func (o *BtTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this bt too many requests response has a 5xx status code
func (o *BtTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this bt too many requests response a status code equal to that given
func (o *BtTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *BtTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btTooManyRequests ", 429)
}

func (o *BtTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btTooManyRequests ", 429)
}

func (o *BtTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBtInternalServerError creates a BtInternalServerError with default headers values
func NewBtInternalServerError() *BtInternalServerError {
	return &BtInternalServerError{}
}

/*
BtInternalServerError describes a response with status code 500, with default header values.

Failed to retrieve due to error.
*/
type BtInternalServerError struct {
}

// IsSuccess returns true when this bt internal server error response has a 2xx status code
func (o *BtInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bt internal server error response has a 3xx status code
func (o *BtInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bt internal server error response has a 4xx status code
func (o *BtInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this bt internal server error response has a 5xx status code
func (o *BtInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this bt internal server error response a status code equal to that given
func (o *BtInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *BtInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btInternalServerError ", 500)
}

func (o *BtInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/bt/{btNetworkId}][%d] btInternalServerError ", 500)
}

func (o *BtInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
