// Code generated by go-swagger; DO NOT EDIT.

package v3_a_l_p_h_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/borud/wigle/models"
)

// CdmaCellReader is a Reader for the CdmaCell structure.
type CdmaCellReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CdmaCellReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCdmaCellOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCdmaCellUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCdmaCellForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCdmaCellNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCdmaCellTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCdmaCellInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCdmaCellOK creates a CdmaCellOK with default headers values
func NewCdmaCellOK() *CdmaCellOK {
	return &CdmaCellOK{}
}

/*
CdmaCellOK describes a response with status code 200, with default header values.

Request succeeded
*/
type CdmaCellOK struct {
	Payload *models.CellDetail
}

// IsSuccess returns true when this cdma cell o k response has a 2xx status code
func (o *CdmaCellOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cdma cell o k response has a 3xx status code
func (o *CdmaCellOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell o k response has a 4xx status code
func (o *CdmaCellOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cdma cell o k response has a 5xx status code
func (o *CdmaCellOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cdma cell o k response a status code equal to that given
func (o *CdmaCellOK) IsCode(code int) bool {
	return code == 200
}

func (o *CdmaCellOK) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellOK  %+v", 200, o.Payload)
}

func (o *CdmaCellOK) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellOK  %+v", 200, o.Payload)
}

func (o *CdmaCellOK) GetPayload() *models.CellDetail {
	return o.Payload
}

func (o *CdmaCellOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CellDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCdmaCellUnauthorized creates a CdmaCellUnauthorized with default headers values
func NewCdmaCellUnauthorized() *CdmaCellUnauthorized {
	return &CdmaCellUnauthorized{}
}

/*
CdmaCellUnauthorized describes a response with status code 401, with default header values.

Not Authorized
*/
type CdmaCellUnauthorized struct {
}

// IsSuccess returns true when this cdma cell unauthorized response has a 2xx status code
func (o *CdmaCellUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cdma cell unauthorized response has a 3xx status code
func (o *CdmaCellUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell unauthorized response has a 4xx status code
func (o *CdmaCellUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cdma cell unauthorized response has a 5xx status code
func (o *CdmaCellUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cdma cell unauthorized response a status code equal to that given
func (o *CdmaCellUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CdmaCellUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellUnauthorized ", 401)
}

func (o *CdmaCellUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellUnauthorized ", 401)
}

func (o *CdmaCellUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCdmaCellForbidden creates a CdmaCellForbidden with default headers values
func NewCdmaCellForbidden() *CdmaCellForbidden {
	return &CdmaCellForbidden{}
}

/*
CdmaCellForbidden describes a response with status code 403, with default header values.

Commercial request made for non-commercial resource
*/
type CdmaCellForbidden struct {
}

// IsSuccess returns true when this cdma cell forbidden response has a 2xx status code
func (o *CdmaCellForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cdma cell forbidden response has a 3xx status code
func (o *CdmaCellForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell forbidden response has a 4xx status code
func (o *CdmaCellForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cdma cell forbidden response has a 5xx status code
func (o *CdmaCellForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cdma cell forbidden response a status code equal to that given
func (o *CdmaCellForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CdmaCellForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellForbidden ", 403)
}

func (o *CdmaCellForbidden) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellForbidden ", 403)
}

func (o *CdmaCellForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCdmaCellNotFound creates a CdmaCellNotFound with default headers values
func NewCdmaCellNotFound() *CdmaCellNotFound {
	return &CdmaCellNotFound{}
}

/*
CdmaCellNotFound describes a response with status code 404, with default header values.

No matching network ID found.
*/
type CdmaCellNotFound struct {
}

// IsSuccess returns true when this cdma cell not found response has a 2xx status code
func (o *CdmaCellNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cdma cell not found response has a 3xx status code
func (o *CdmaCellNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell not found response has a 4xx status code
func (o *CdmaCellNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cdma cell not found response has a 5xx status code
func (o *CdmaCellNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cdma cell not found response a status code equal to that given
func (o *CdmaCellNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CdmaCellNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellNotFound ", 404)
}

func (o *CdmaCellNotFound) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellNotFound ", 404)
}

func (o *CdmaCellNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCdmaCellTooManyRequests creates a CdmaCellTooManyRequests with default headers values
func NewCdmaCellTooManyRequests() *CdmaCellTooManyRequests {
	return &CdmaCellTooManyRequests{}
}

/*
CdmaCellTooManyRequests describes a response with status code 429, with default header values.

too many DETAIL queries today.
*/
type CdmaCellTooManyRequests struct {
}

// IsSuccess returns true when this cdma cell too many requests response has a 2xx status code
func (o *CdmaCellTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cdma cell too many requests response has a 3xx status code
func (o *CdmaCellTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell too many requests response has a 4xx status code
func (o *CdmaCellTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cdma cell too many requests response has a 5xx status code
func (o *CdmaCellTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cdma cell too many requests response a status code equal to that given
func (o *CdmaCellTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CdmaCellTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellTooManyRequests ", 429)
}

func (o *CdmaCellTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellTooManyRequests ", 429)
}

func (o *CdmaCellTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCdmaCellInternalServerError creates a CdmaCellInternalServerError with default headers values
func NewCdmaCellInternalServerError() *CdmaCellInternalServerError {
	return &CdmaCellInternalServerError{}
}

/*
CdmaCellInternalServerError describes a response with status code 500, with default header values.

Failed to retrieve due to error.
*/
type CdmaCellInternalServerError struct {
}

// IsSuccess returns true when this cdma cell internal server error response has a 2xx status code
func (o *CdmaCellInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cdma cell internal server error response has a 3xx status code
func (o *CdmaCellInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cdma cell internal server error response has a 4xx status code
func (o *CdmaCellInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cdma cell internal server error response has a 5xx status code
func (o *CdmaCellInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cdma cell internal server error response a status code equal to that given
func (o *CdmaCellInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CdmaCellInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellInternalServerError ", 500)
}

func (o *CdmaCellInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/CDMA/{sid}/{nid}/{bsid}][%d] cdmaCellInternalServerError ", 500)
}

func (o *CdmaCellInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
