// Code generated by go-swagger; DO NOT EDIT.

package v3_a_l_p_h_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCellChannelParams creates a new CellChannelParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCellChannelParams() *CellChannelParams {
	return &CellChannelParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCellChannelParamsWithTimeout creates a new CellChannelParams object
// with the ability to set a timeout on a request.
func NewCellChannelParamsWithTimeout(timeout time.Duration) *CellChannelParams {
	return &CellChannelParams{
		timeout: timeout,
	}
}

// NewCellChannelParamsWithContext creates a new CellChannelParams object
// with the ability to set a context for a request.
func NewCellChannelParamsWithContext(ctx context.Context) *CellChannelParams {
	return &CellChannelParams{
		Context: ctx,
	}
}

// NewCellChannelParamsWithHTTPClient creates a new CellChannelParams object
// with the ability to set a custom HTTPClient for a request.
func NewCellChannelParamsWithHTTPClient(client *http.Client) *CellChannelParams {
	return &CellChannelParams{
		HTTPClient: client,
	}
}

/*
CellChannelParams contains all the parameters to send to the API endpoint

	for the cell channel operation.

	Typically these are written to a http.Request.
*/
type CellChannelParams struct {

	/* ClosestLat.

	   Latitude to order by closest network (requires closestLong)
	*/
	ClosestLat *float64

	/* ClosestLong.

	   Longitude to order by closest network (requires closestLat)
	*/
	ClosestLong *float64

	/* Latitude1.

	   First bounding latitude
	*/
	Latitude1 float64

	/* Latitude2.

	   Second bounding latitude
	*/
	Latitude2 float64

	/* Longitude1.

	   First bounding longitude
	*/
	Longitude1 float64

	/* Longitude2.

	   Second bounding longitude
	*/
	Longitude2 float64

	/* Type.

	   Network Type: GSM/LTE/WCDMA/5G NR
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cell channel params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CellChannelParams) WithDefaults() *CellChannelParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cell channel params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CellChannelParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cell channel params
func (o *CellChannelParams) WithTimeout(timeout time.Duration) *CellChannelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cell channel params
func (o *CellChannelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cell channel params
func (o *CellChannelParams) WithContext(ctx context.Context) *CellChannelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cell channel params
func (o *CellChannelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cell channel params
func (o *CellChannelParams) WithHTTPClient(client *http.Client) *CellChannelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cell channel params
func (o *CellChannelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClosestLat adds the closestLat to the cell channel params
func (o *CellChannelParams) WithClosestLat(closestLat *float64) *CellChannelParams {
	o.SetClosestLat(closestLat)
	return o
}

// SetClosestLat adds the closestLat to the cell channel params
func (o *CellChannelParams) SetClosestLat(closestLat *float64) {
	o.ClosestLat = closestLat
}

// WithClosestLong adds the closestLong to the cell channel params
func (o *CellChannelParams) WithClosestLong(closestLong *float64) *CellChannelParams {
	o.SetClosestLong(closestLong)
	return o
}

// SetClosestLong adds the closestLong to the cell channel params
func (o *CellChannelParams) SetClosestLong(closestLong *float64) {
	o.ClosestLong = closestLong
}

// WithLatitude1 adds the latitude1 to the cell channel params
func (o *CellChannelParams) WithLatitude1(latitude1 float64) *CellChannelParams {
	o.SetLatitude1(latitude1)
	return o
}

// SetLatitude1 adds the latitude1 to the cell channel params
func (o *CellChannelParams) SetLatitude1(latitude1 float64) {
	o.Latitude1 = latitude1
}

// WithLatitude2 adds the latitude2 to the cell channel params
func (o *CellChannelParams) WithLatitude2(latitude2 float64) *CellChannelParams {
	o.SetLatitude2(latitude2)
	return o
}

// SetLatitude2 adds the latitude2 to the cell channel params
func (o *CellChannelParams) SetLatitude2(latitude2 float64) {
	o.Latitude2 = latitude2
}

// WithLongitude1 adds the longitude1 to the cell channel params
func (o *CellChannelParams) WithLongitude1(longitude1 float64) *CellChannelParams {
	o.SetLongitude1(longitude1)
	return o
}

// SetLongitude1 adds the longitude1 to the cell channel params
func (o *CellChannelParams) SetLongitude1(longitude1 float64) {
	o.Longitude1 = longitude1
}

// WithLongitude2 adds the longitude2 to the cell channel params
func (o *CellChannelParams) WithLongitude2(longitude2 float64) *CellChannelParams {
	o.SetLongitude2(longitude2)
	return o
}

// SetLongitude2 adds the longitude2 to the cell channel params
func (o *CellChannelParams) SetLongitude2(longitude2 float64) {
	o.Longitude2 = longitude2
}

// WithType adds the typeVar to the cell channel params
func (o *CellChannelParams) WithType(typeVar string) *CellChannelParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the cell channel params
func (o *CellChannelParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *CellChannelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClosestLat != nil {

		// query param closestLat
		var qrClosestLat float64

		if o.ClosestLat != nil {
			qrClosestLat = *o.ClosestLat
		}
		qClosestLat := swag.FormatFloat64(qrClosestLat)
		if qClosestLat != "" {

			if err := r.SetQueryParam("closestLat", qClosestLat); err != nil {
				return err
			}
		}
	}

	if o.ClosestLong != nil {

		// query param closestLong
		var qrClosestLong float64

		if o.ClosestLong != nil {
			qrClosestLong = *o.ClosestLong
		}
		qClosestLong := swag.FormatFloat64(qrClosestLong)
		if qClosestLong != "" {

			if err := r.SetQueryParam("closestLong", qClosestLong); err != nil {
				return err
			}
		}
	}

	// query param latitude1
	qrLatitude1 := o.Latitude1
	qLatitude1 := swag.FormatFloat64(qrLatitude1)
	if qLatitude1 != "" {

		if err := r.SetQueryParam("latitude1", qLatitude1); err != nil {
			return err
		}
	}

	// query param latitude2
	qrLatitude2 := o.Latitude2
	qLatitude2 := swag.FormatFloat64(qrLatitude2)
	if qLatitude2 != "" {

		if err := r.SetQueryParam("latitude2", qLatitude2); err != nil {
			return err
		}
	}

	// query param longitude1
	qrLongitude1 := o.Longitude1
	qLongitude1 := swag.FormatFloat64(qrLongitude1)
	if qLongitude1 != "" {

		if err := r.SetQueryParam("longitude1", qLongitude1); err != nil {
			return err
		}
	}

	// query param longitude2
	qrLongitude2 := o.Longitude2
	qLongitude2 := swag.FormatFloat64(qrLongitude2)
	if qLongitude2 != "" {

		if err := r.SetQueryParam("longitude2", qLongitude2); err != nil {
			return err
		}
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
