// Code generated by go-swagger; DO NOT EDIT.

package v3_a_l_p_h_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/borud/wigle/models"
)

// CellReader is a Reader for the Cell structure.
type CellReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CellReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCellOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCellUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCellForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCellNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCellTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCellInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCellOK creates a CellOK with default headers values
func NewCellOK() *CellOK {
	return &CellOK{}
}

/*
CellOK describes a response with status code 200, with default header values.

Request succeeded
*/
type CellOK struct {
	Payload *models.BtDetail
}

// IsSuccess returns true when this cell o k response has a 2xx status code
func (o *CellOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cell o k response has a 3xx status code
func (o *CellOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell o k response has a 4xx status code
func (o *CellOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cell o k response has a 5xx status code
func (o *CellOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cell o k response a status code equal to that given
func (o *CellOK) IsCode(code int) bool {
	return code == 200
}

func (o *CellOK) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellOK  %+v", 200, o.Payload)
}

func (o *CellOK) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellOK  %+v", 200, o.Payload)
}

func (o *CellOK) GetPayload() *models.BtDetail {
	return o.Payload
}

func (o *CellOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BtDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCellUnauthorized creates a CellUnauthorized with default headers values
func NewCellUnauthorized() *CellUnauthorized {
	return &CellUnauthorized{}
}

/*
CellUnauthorized describes a response with status code 401, with default header values.

Not Authorized
*/
type CellUnauthorized struct {
}

// IsSuccess returns true when this cell unauthorized response has a 2xx status code
func (o *CellUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cell unauthorized response has a 3xx status code
func (o *CellUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell unauthorized response has a 4xx status code
func (o *CellUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cell unauthorized response has a 5xx status code
func (o *CellUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cell unauthorized response a status code equal to that given
func (o *CellUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CellUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellUnauthorized ", 401)
}

func (o *CellUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellUnauthorized ", 401)
}

func (o *CellUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCellForbidden creates a CellForbidden with default headers values
func NewCellForbidden() *CellForbidden {
	return &CellForbidden{}
}

/*
CellForbidden describes a response with status code 403, with default header values.

Commercial request made for non-commercial resource
*/
type CellForbidden struct {
}

// IsSuccess returns true when this cell forbidden response has a 2xx status code
func (o *CellForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cell forbidden response has a 3xx status code
func (o *CellForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell forbidden response has a 4xx status code
func (o *CellForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cell forbidden response has a 5xx status code
func (o *CellForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cell forbidden response a status code equal to that given
func (o *CellForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CellForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellForbidden ", 403)
}

func (o *CellForbidden) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellForbidden ", 403)
}

func (o *CellForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCellNotFound creates a CellNotFound with default headers values
func NewCellNotFound() *CellNotFound {
	return &CellNotFound{}
}

/*
CellNotFound describes a response with status code 404, with default header values.

No matching network ID found.
*/
type CellNotFound struct {
}

// IsSuccess returns true when this cell not found response has a 2xx status code
func (o *CellNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cell not found response has a 3xx status code
func (o *CellNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell not found response has a 4xx status code
func (o *CellNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cell not found response has a 5xx status code
func (o *CellNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cell not found response a status code equal to that given
func (o *CellNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CellNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellNotFound ", 404)
}

func (o *CellNotFound) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellNotFound ", 404)
}

func (o *CellNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCellTooManyRequests creates a CellTooManyRequests with default headers values
func NewCellTooManyRequests() *CellTooManyRequests {
	return &CellTooManyRequests{}
}

/*
CellTooManyRequests describes a response with status code 429, with default header values.

too many DETAIL queries today.
*/
type CellTooManyRequests struct {
}

// IsSuccess returns true when this cell too many requests response has a 2xx status code
func (o *CellTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cell too many requests response has a 3xx status code
func (o *CellTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell too many requests response has a 4xx status code
func (o *CellTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cell too many requests response has a 5xx status code
func (o *CellTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cell too many requests response a status code equal to that given
func (o *CellTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CellTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellTooManyRequests ", 429)
}

func (o *CellTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellTooManyRequests ", 429)
}

func (o *CellTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCellInternalServerError creates a CellInternalServerError with default headers values
func NewCellInternalServerError() *CellInternalServerError {
	return &CellInternalServerError{}
}

/*
CellInternalServerError describes a response with status code 500, with default header values.

Failed to retrieve due to error.
*/
type CellInternalServerError struct {
}

// IsSuccess returns true when this cell internal server error response has a 2xx status code
func (o *CellInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cell internal server error response has a 3xx status code
func (o *CellInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cell internal server error response has a 4xx status code
func (o *CellInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cell internal server error response has a 5xx status code
func (o *CellInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cell internal server error response a status code equal to that given
func (o *CellInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CellInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellInternalServerError ", 500)
}

func (o *CellInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v3/detail/cell/{type}/{operator}/{lac}/{cid}][%d] cellInternalServerError ", 500)
}

func (o *CellInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
